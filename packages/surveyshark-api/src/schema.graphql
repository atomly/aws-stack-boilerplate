[object Object],type Member {
  id: ID!
  posts: [Post]
  profile: Profile!
  teams: [Team]
}

input FindMemberInput {
  id: ID!
}

type Query {
  members: [Member]
  member(input: FindMemberInput!): Member
  posts: [Post]
  post(input: FindPostInput!): Post
  profile(input: FindProfileInput!): Profile
  test: String!
  ping: String!
  teams: [Team]
  team(input: FindTeamInput!): Team
  users: [User]
  user(input: FindUserInput!): User
  me: User
}

type Post {
  id: ID!
  memberId: ID!
  header: String
  body: String
}

input FindPostInput {
  id: ID!
}

input NewPostInput {
  memberId: ID!
  header: String!
  body: String!
}

type Mutation {
  newPost(input: NewPostInput!): Post
  newTeam(input: NewTeamInput!): Team
  updateTeam(input: UpdateTeamInput!): Team
  newUser(input: NewUserInput!): User
  authenticate(input: AuthenticateInput!): User
  logout: Boolean!
}

type Subscription {
  newPostSubscription: Post!
  hello(name: String!): String!
}

type Profile {
  id: ID!
  member: Member!
}

input FindProfileInput {
  id: ID!
}

type Team {
  id: ID!
  members: [Member]
}

input FindTeamInput {
  id: ID!
}

input NewTeamInput {
  createdBy: ID!
}

input UpdateTeamInput {
  id: ID!
  newMember: ID!
}

type User {
  id: ID!
  email: ID!
  memberId: ID!
  member: Member!
}

input FindUserInput {
  id: ID!
}

input NewUserInput {
  email: String!
  password: String!
}

input AuthenticateInput {
  email: String!
  password: String!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
