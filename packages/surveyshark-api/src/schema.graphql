type Answer {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  parentQuestionId: ID!
  type: SurveyTypes!
  subType: QuestionTypes!
  displayText: String!
  data: JSON
}

input QueryReadAnswerInput {
  uuid: ID!
}

input QueryReadAnswersInput {
  surveyId: ID!
  parentQuestionId: ID!
}

type Query {
  readAnswer(input: QueryReadAnswerInput!): Answer
  readAnswers(input: QueryReadAnswersInput!): [Answer!]!
  readClosure(input: QueryReadClosureInput!, withAnswers: Boolean): Closure
  readClosures(input: QueryReadClosuresInput!, withAnswers: Boolean): [Closure!]!
  test: String!
  ping: String!
  readQuestion(input: QueryReadQuestionInput!, withAnswers: Boolean): Question
  readQuestions(input: QueryReadQuestionsInput!, withAnswers: Boolean): [Question!]!
  readSurvey(input: QueryReadSurveyInput!): Survey
  readSurveys(withData: Boolean): [Survey!]!
  user(input: QueryUserInput!): User
  me: User
  defaultAuthentication(input: QueryDefaultAuthenticationInput!): User
  deauthentication: Boolean!
}

input MutationCreateAnswerInput {
  surveyId: ID!
  parentQuestionId: ID!
  displayText: String!
  data: JSON
}

input MutationUpdateAnswerInput {
  uuid: ID!
  displayText: String!
  data: JSON
}

input MutationDeleteAnswerInput {
  uuid: ID!
}

type Mutation {
  createAnswer(input: MutationCreateAnswerInput!): Answer
  updateAnswer(input: MutationUpdateAnswerInput!): Answer
  deleteAnswer(input: MutationDeleteAnswerInput!): Answer
  createClosure(input: MutationCreateClosureInput!): Closure
  updateClosure(input: MutationUpdateClosureInput!): Closure
  deleteClosure(input: MutationDeleteClosureInput!): Closure
  createQuestion(input: MutationCreateQuestionInput!): Question
  updateQuestion(input: MutationUpdateQuestionInput!): Question
  deleteQuestion(input: MutationDeleteQuestionInput!): Question
  createSurvey(input: MutationCreateSurveyInput!): Survey
  updateSurvey(input: MutationUpdateSurveyInput!): Survey
  deleteSurvey(input: MutationDeleteSurveyInput!): Survey
  defaultAuthentication(input: MutationDefaultAuthenticationInput!): User
}

type Closure {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  type: SurveyTypes!
  displayText: String!
}

input QueryReadClosureInput {
  uuid: ID!
}

input QueryReadClosuresInput {
  surveyId: ID!
}

input MutationCreateClosureInput {
  surveyId: ID!
  parentClosureId: ID!
  type: SurveyTypes!
  displayText: String!
}

input MutationUpdateClosureInput {
  uuid: ID!
  displayText: String!
  data: JSON
}

input MutationDeleteClosureInput {
  uuid: ID!
}

enum SurveyStatuses {
  UNPUBLISHED
  PUBLISHED
  MAINTENANCE
}

enum SurveyTypes {
  QUESTION
  ANSWER
  CLOSURE
}

enum QuestionTypes {
  BENCHMARKABLE
  FILE_UPLOAD
  IMAGE_CHOICE
  LIKERT_SCALES
  OPEN_ENDED
  RANKING
  RATING_SCALES
  SINGLE_CHOICE
  SLIDER
  MULTI_CHOICES
}

type Question {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  type: SurveyTypes!
  subType: QuestionTypes!
  displayText: String!
  data: JSON
  answers: [Answer!]
}

input QueryReadQuestionInput {
  uuid: ID!
}

input QueryReadQuestionsInput {
  surveyId: ID!
}

input MutationCreateQuestionInput {
  surveyId: ID!
  displayText: String!
  data: JSON
}

input MutationUpdateQuestionInput {
  uuid: ID!
  displayText: String!
  data: JSON
}

input MutationDeleteQuestionInput {
  uuid: ID!
}

scalar Date

scalar JSON

type Subscription {
  hello(name: String!): String!
}

union GraphVertexValue = Question | Closure | Answer

type Graph {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  vertices: [GraphVertex!]!
  edges: [GraphEdge!]!
}

type GraphVertex {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  graphId: ID!
  key: String!
  value: GraphVertexValue!
}

type GraphEdge {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  graphId: ID!
  from: GraphVertex!
  to: GraphVertex!
  weight: Int
}

type Survey {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  status: SurveyStatuses!
  user: User!
  name: String!
  graph: Graph!
  startingVertex: GraphVertex
  closingVertex: GraphVertex
}

input QueryReadSurveyInput {
  uuid: ID!
}

input MutationCreateSurveyInput {
  name: String!
}

input MutationUpdateSurveyInput {
  uuid: ID!
  status: SurveyStatuses
  name: String!
  displayText: String
  data: JSON
}

input MutationDeleteSurveyInput {
  uuid: ID!
}

type User {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  provider: String
  providerId: String
  firstName: String
  lastName: String
  displayName: String
  email: ID!
}

input QueryUserInput {
  uuid: ID!
}

input QueryDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

input MutationDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
