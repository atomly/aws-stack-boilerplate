type Answer {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  parentQuestionId: ID!
  type: String!
  subType: String!
  name: String
  data: JSONObject!
}

input QueryReadAnswerInput {
  uuid: ID!
}

input QueryReadAnswersInput {
  surveyId: ID!
  parentQuestionId: ID!
}

type Query {
  readAnswer(input: QueryReadAnswerInput!): Answer
  readAnswers(input: QueryReadAnswersInput!): [Answer!]!
  readClosure(input: QueryReadClosureInput!, withAnswers: Boolean): Closure
  readClosures(input: QueryReadClosuresInput!, withAnswers: Boolean): [Closure!]!
  readGraphEdge(input: QueryReadGraphEdgeInput!): GraphEdge
  readGraphEdges(input: QueryReadGraphEdgesInput!): [GraphEdge!]!
  readPlans: [Plan!]!
  readSelfCustomer: Customer
  readSelfSubscription: Subscription
  test: String!
  ping: String!
  readQuestion(input: QueryReadQuestionInput!, withAnswers: Boolean): Question
  readQuestions(input: QueryReadQuestionsInput!, withAnswers: Boolean): [Question!]!
  readResult(input: QueryReadResultInput!): Result
  readResults(input: QueryReadResultsInput!): [Result!]!
  subPing(input: QuerySubPingInput!): String
  readSurvey(input: QueryReadSurveyInput!): Survey
  readSurveys(withData: Boolean): [Survey!]!
  validateSurvey(input: QueryValidateSurveyInput!): [SurveyValidationError]
  user(input: QueryUserInput!): User
  me: User
  defaultAuthentication(input: QueryDefaultAuthenticationInput!): User
  deauthentication: Boolean!
  readWelcomeScreen(input: QueryReadWelcomeScreenInput!, withAnswers: Boolean): WelcomeScreen
  readWelcomeScreens(input: QueryReadWelcomeScreensInput!, withAnswers: Boolean): [WelcomeScreen!]!
}

input MutationCreateAnswerInput {
  surveyId: ID!
  parentQuestionId: ID!
  name: String
  subType: QuestionTypes!
  data: JSONObject!
}

input MutationUpdateAnswerInput {
  uuid: ID!
  name: String
  data: JSONObject
}

input MutationDeleteAnswerInput {
  uuid: ID!
}

type Mutation {
  createAnswer(input: MutationCreateAnswerInput!): GraphVertex
  updateAnswer(input: MutationUpdateAnswerInput!): GraphVertex
  deleteAnswer(input: MutationDeleteAnswerInput!): GraphVertex
  createClosure(input: MutationCreateClosureInput!): GraphVertex
  updateClosure(input: MutationUpdateClosureInput!): GraphVertex
  deleteClosure(input: MutationDeleteClosureInput!): GraphVertex
  createGraphEdge(input: MutationCreateGraphEdgeInput!): GraphEdge
  updateGraphEdge(input: MutationUpdateGraphEdgeInput!): GraphEdge
  deleteGraphEdge(input: MutationDeleteGraphEdgeInput!): GraphEdge
  createSelfSubscription(input: MutationCreateSelfSubscriptionInput!, details: MutationCreateSelfSubscriptionDetails!, card: MutationCreateSelfSubscriptionCard!, address: MutationCreateSelfSubscriptionAddress!): Subscription
  updateSelfSubscription(input: MutationUpdateSelfSubscriptionInput!, details: MutationCreateSelfSubscriptionDetails!, card: MutationCreateSelfSubscriptionCard!, address: MutationCreateSelfSubscriptionAddress!): Subscription
  cancelSelfSubscription(input: MutationCancelSelfSubscriptionInput!): Subscription
  createQuestion(input: MutationCreateQuestionInput!): GraphVertex
  updateQuestion(input: MutationUpdateQuestionInput!): GraphVertex
  deleteQuestion(input: MutationDeleteQuestionInput!): GraphVertex
  createResult(input: MutationCreateResultInput!): Result
  updateResult(input: MutationUpdateResultInput!): Result
  deleteResult(input: MutationDeleteResultInput!): Result
  createSurvey(input: MutationCreateSurveyInput!): Survey
  updateSurvey(input: MutationUpdateSurveyInput!): Survey
  deleteSurvey(input: MutationDeleteSurveyInput!): Survey
  defaultAuthentication(input: MutationDefaultAuthenticationInput!): User
  createWelcomeScreen(input: MutationCreateWelcomeScreenInput!): GraphVertex
  updateWelcomeScreen(input: MutationUpdateWelcomeScreenInput!): GraphVertex
  deleteWelcomeScreen(input: MutationDeleteWelcomeScreenInput!): GraphVertex
}

type Closure {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  type: String!
  name: String
  description: String
}

input QueryReadClosureInput {
  uuid: ID!
}

input QueryReadClosuresInput {
  surveyId: ID!
}

input MutationCreateClosureInput {
  surveyId: ID!
  parentClosureId: ID!
  type: SurveyTypes!
  name: String
  description: String
}

input MutationUpdateClosureInput {
  uuid: ID!
  name: String
  description: String
}

input MutationDeleteClosureInput {
  uuid: ID!
}

enum SurveyStatuses {
  UNPUBLISHED
  PUBLISHED
  MAINTENANCE
}

enum SurveyTypes {
  QUESTION
  ANSWER
  CLOSURE
  WELCOME_SCREEN
}

enum QuestionTypes {
  BENCHMARKABLE
  FILE_UPLOAD
  IMAGE_CHOICE
  LIKERT_SCALES
  OPEN_ENDED
  RANKING
  RATING_SCALES
  SINGLE_CHOICE
  SLIDER
  MULTI_CHOICES
}

union GraphVertexValue = Question | Closure | Answer | WelcomeScreen

type Graph {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  vertices: [GraphVertex!]!
  edges: [GraphEdge!]!
}

type GraphVertex {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  graphId: ID!
  key: String!
  value: GraphVertexValue
}

type GraphEdge {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  graphId: ID!
  from: GraphVertex!
  to: GraphVertex!
  weight: Int
}

input QueryReadGraphEdgeInput {
  fromVertexKey: ID!
  toVertexKey: ID!
}

input QueryReadGraphEdgesInput {
  fromVertexKey: ID
  toVertexKey: ID
}

input MutationCreateGraphEdgeInput {
  fromVertexKey: ID!
  toVertexKey: ID!
}

input MutationUpdateGraphEdgeInput {
  fromVertexKey: ID!
  toVertexKey: ID!
  weight: Int
}

input MutationDeleteGraphEdgeInput {
  fromVertexKey: ID!
  toVertexKey: ID!
}

type CustomerPaymentMethodDetailsCard {
  lastFourDigits: String!
  expMonth: String!
  expYear: String!
  fingerprint: String!
}

type CustomerPaymentMethodDetailsAddress {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

type CustomerPaymentMethodDetails {
  card: CustomerPaymentMethodDetailsCard!
  address: CustomerPaymentMethodDetailsAddress!
  email: String
  name: String
  phone: String
}

type CustomerPaymentMethod {
  externalId: String!
  details: CustomerPaymentMethodDetails!
}

type Customer {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  userId: ID!
  externalId: ID!
  currency: String!
  externalDefaultPaymentMethodId: ID
  paymentMethods: [CustomerPaymentMethod!]!
  invoicePrefix: String
}

type Product {
  externalId: String!
  name: String!
  description: String
  metadata: JSONObject
}

type PriceRecurring {
  interval: String!
  intervalCount: Int!
}

type Price {
  externalId: String!
  nickname: String!
  currency: String!
  unitAmount: Int!
  recurring: PriceRecurring!
  metadata: JSONObject
}

type Plan {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String!
  isActive: Boolean!
  product: Product!
  price: Price!
  metadata: JSONObject!
}

type SubscriptionItems {
  externalId: String!
  externalPriceId: String!
  quantity: Int!
}

type Subscription {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  userId: ID!
  planId: ID!
  externalId: String!
  externalCustomerId: String!
  currentPeriodEnd: Date!
  items: [SubscriptionItems!]!
  status: String!
  collectionMethod: String!
  externalLatestInvoiceId: String
  subPong: String
  greetings: String
}

input MutationCreateSelfSubscriptionInput {
  planId: ID!
}

input MutationCreateSelfSubscriptionDetails {
  email: String
  name: String
  phone: String
}

input MutationCreateSelfSubscriptionCard {
  number: String!
  expMonth: Int!
  expYear: Int!
  cvc: String!
}

input MutationCreateSelfSubscriptionAddress {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

input MutationUpdateSelfSubscriptionInput {
  subscriptionId: ID!
  planId: ID
}

input MutationUpdateSelfSubscriptionDetails {
  email: String
  name: String
  phone: String
}

input MutationUpdateSelfSubscriptionCard {
  number: String
  expMonth: Int
  expYear: Int
  cvc: String
}

input MutationUpdateSelfSubscriptionAddress {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

input MutationCancelSelfSubscriptionInput {
  subscriptionId: ID!
}

type Question {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  type: String!
  subType: String!
  name: String
  description: String
  isRequired: Boolean!
  data: JSONObject!
  answers: [Answer!]
}

input QueryReadQuestionInput {
  uuid: ID!
}

input QueryReadQuestionsInput {
  surveyId: ID!
}

input MutationCreateQuestionInput {
  surveyId: ID!
  name: String
  subType: QuestionTypes!
  description: String
  isRequired: Boolean!
  data: JSONObject!
}

input MutationUpdateQuestionInput {
  uuid: ID!
  name: String
  subType: QuestionTypes
  description: String
  isRequired: Boolean
  data: JSONObject
}

input MutationDeleteQuestionInput {
  uuid: ID!
}

type ResultData {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  question: Question!
  answer: JSONObject!
}

type Result {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  data: [ResultData!]!
  identifier: String
}

input ResultDataInput {
  questionId: ID!
  answer: JSONObject!
}

input QueryReadResultInput {
  uuid: ID!
}

input QueryReadResultsInput {
  surveyId: ID!
}

input MutationCreateResultInput {
  surveyId: ID!
  data: [ResultDataInput!]!
  identifier: String
}

input MutationUpdateResultInput {
  uuid: ID!
  identifier: String
}

input MutationDeleteResultInput {
  uuid: ID!
}

scalar Date

scalar JSON

scalar JSONObject

input QuerySubPingInput {
  message: String!
}

type SurveyCustomization {
  color: String!
}

type Survey {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  status: SurveyStatuses!
  user: User!
  name: String!
  description: String
  fillUrlQrCode: String
  graph: Graph!
  startingVertex: GraphVertex
  closingVertex: GraphVertex
  customization: SurveyCustomization!
}

type SurveyValidationError {
  vertexKey: ID!
  error: String!
}

input QueryReadSurveyInput {
  uuid: ID!
}

input QueryValidateSurveyInput {
  uuid: ID!
}

input SurveyCustomizationInput {
  color: String!
}

input MutationCreateSurveyInput {
  name: String!
  description: String
  customization: SurveyCustomizationInput
}

input MutationUpdateSurveyInput {
  uuid: ID!
  status: SurveyStatuses
  name: String
  description: String
  customization: SurveyCustomizationInput
}

input MutationDeleteSurveyInput {
  uuid: ID!
}

type User {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  provider: String
  providerId: String
  firstName: String
  lastName: String
  displayName: String
  email: ID!
}

input QueryUserInput {
  uuid: ID!
}

input QueryDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

input MutationDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

type WelcomeScreen {
  uuid: ID!
  createdAt: Date!
  updatedAt: Date!
  surveyId: ID!
  type: String!
  name: String
  description: String
}

input QueryReadWelcomeScreenInput {
  uuid: ID!
}

input QueryReadWelcomeScreensInput {
  surveyId: ID!
}

input MutationCreateWelcomeScreenInput {
  surveyId: ID!
  parentWelcomeScreenId: ID!
  type: SurveyTypes!
  name: String
  description: String
}

input MutationUpdateWelcomeScreenInput {
  uuid: ID!
  name: String
  description: String
}

input MutationDeleteWelcomeScreenInput {
  uuid: ID!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
