type Query {
  test: String!
  ping: String!
  user(input: QueryUserInput!): User
  me: User
  defaultAuthentication(input: QueryDefaultAuthenticationInput!): User
  deauthentication: Boolean!
}

scalar Date

type Subscription {
  hello(name: String!): String!
}

type User {
  uuid: ID!
  createdAt: Date
  updatedAt: Date
  provider: String
  providerId: String
  firstName: String
  lastName: String
  displayName: String
  email: ID!
}

input QueryUserInput {
  uuid: ID!
}

input QueryDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

input MutationDefaultAuthenticationInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  displayName: String
}

type Mutation {
  defaultAuthentication(input: MutationDefaultAuthenticationInput!): User
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
